webpackHotUpdate("youtube",{

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Youtube2Comp.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Youtube2Comp.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_Modal_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/components/Modal.vue */ \"./src/components/Modal.vue\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);\n//\n//\n//\n\n\nvar electron = window.electron;\nvar google = electron.google,\n    init = electron.init,\n    config = electron.config;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"Youtube2\" // components: {\n  //     Modal\n  // },\n  // props: {},\n  // data: function() {\n  //     return {\n  //         videoList: [],\n  //         videoSearch: \"\",\n  //         path: \"\",\n  //         downloadAll: \"mp3\"\n  //     };\n  // },\n  // mounted: function() {\n  //     config\n  //         .getUserConfig()\n  //         .then(userConfig => {\n  //             this.path = userConfig.setPath;\n  //             this.videoSearch = userConfig.videoUrl;\n  //             this.videoList = userConfig.videoList;\n  //             if (this.videoList) {\n  //                 this.videoList.forEach(video =>\n  //                     this.getVideoDiskInfo(video.title)\n  //                 );\n  //             }\n  //         })\n  //         .catch(console.error);\n  // },\n  // methods: {\n  //     searchVideo: function() {\n  //         if (this.videoSearch) {\n  //             config.getUserConfig().then(userConfig => {\n  //                 userConfig.videoUrl = this.videoSearch;\n  //                 config.saveCurrentUserConfig();\n  //             });\n  //             const url = new URL(this.videoSearch);\n  //             const list = url.searchParams.get(\"list\");\n  //             if (list) {\n  //                 google.getPlaylist(list).then(items => {\n  //                     items.forEach(item => {\n  //                         const video = this.getVideoByTitle(item.title);\n  //                         if (!video) {\n  //                             item.diskInfo = {};\n  //                             item.dwnProgress = {\n  //                                 progress: 0,\n  //                                 downloading: false\n  //                             };\n  //                             this.videoList.unshift(item);\n  //                             this.getVideoDiskInfo(item.title);\n  //                         }\n  //                     });\n  //                     config.getUserConfig().then(userConfig => {\n  //                         userConfig.videoList = this.videoList;\n  //                         config.saveCurrentUserConfig();\n  //                     });\n  //                 });\n  //             } else {\n  //                 google\n  //                     .getVideoInfo({ videoUrl: this.videoSearch })\n  //                     .then(response => {\n  //                         const video = this.getVideoByTitle(response.title);\n  //                         if (!video) {\n  //                             response.diskInfo = {};\n  //                             response.dwnProgress = {\n  //                                 progress: 0,\n  //                                 downloading: false\n  //                             };\n  //                             this.videoList.unshift(response);\n  //                             this.getVideoDiskInfo(response.title);\n  //                             config.getUserConfig().then(userConfig => {\n  //                                 userConfig.videoList = this.videoList;\n  //                                 config.saveCurrentUserConfig();\n  //                             });\n  //                         }\n  //                     })\n  //                     .catch(console.error);\n  //             }\n  //         }\n  //     },\n  //     clearAll: async function() {\n  //         const userConfig = await config.getUserConfig();\n  //         this.videoList = [];\n  //         userConfig.videoList = this.videoList;\n  //         config.saveCurrentUserConfig();\n  //     },\n  //     downloadAllItems: async function() {\n  //         if (this.videoList) {\n  //             if (this.downloadAll === \"mp4\") {\n  //                 await Promise.all(\n  //                     this.videoList.map(video => {\n  //                         if (!video.diskInfo.mp4) {\n  //                             return this.downloadVideo(video.title, true);\n  //                         }\n  //                     })\n  //                 );\n  //                 this.$refs.modal.openModal({\n  //                     title: \"Success!\",\n  //                     text: \"All videos download complete\"\n  //                 });\n  //             } else {\n  //                 for (let video of this.videoList) {\n  //                     if (!video.diskInfo.mp3) {\n  //                         await this.downloadMusic(video.title, true);\n  //                     }\n  //                 }\n  //                 this.$refs.modal.openModal({\n  //                     title: \"Success!\",\n  //                     text: \"All music download complete\"\n  //                 });\n  //             }\n  //         }\n  //     },\n  //     removeVideo: function(title) {\n  //         const index = this.videoList.findIndex(\n  //             video => video.title === title\n  //         );\n  //         if (index > -1) {\n  //             this.videoList.splice(index, 1);\n  //             config.getUserConfig().then(userConfig => {\n  //                 userConfig.videoList = this.videoList;\n  //                 config.saveCurrentUserConfig();\n  //             });\n  //         }\n  //     },\n  //     removeFromDisk: function(title) {\n  //         google\n  //             .removeVideosContent({\n  //                 savePath: this.path,\n  //                 videoTitles: [title],\n  //                 fileTypes: [\".mp3\", \".mp4\"]\n  //             })\n  //             .then(response => {\n  //                 this.getVideoDiskInfo(title);\n  //                 alert(\"Done!\");\n  //             })\n  //             .catch(error => console.error);\n  //     },\n  //     removeAll: function(title) {\n  //         google\n  //             .removeVideosContent({\n  //                 savePath: this.path,\n  //                 videoTitles: [title],\n  //                 fileTypes: [\".mp3\", \".mp4\"]\n  //             })\n  //             .then(response => this.removeVideo(title))\n  //             .catch(error => console.error);\n  //     },\n  //     getVideoByTitle: function(title) {\n  //         return this.videoList.find(video => video.title === title);\n  //     },\n  //     downloadVideo: function(title, noFeedback) {\n  //         return new Promise((resolve, reject) => {\n  //             const video = this.getVideoByTitle(title);\n  //             if (\n  //                 video &&\n  //                 video.video_url &&\n  //                 this.path &&\n  //                 !video.diskInfo.mp4\n  //             ) {\n  //                 video.dwnProgress.downloading = true;\n  //                 video.dwnProgress.progress = 0;\n  //                 google\n  //                     .downloadVideo({\n  //                         savePath: this.path,\n  //                         videoTitle: video.title,\n  //                         videoUrl: video.video_url,\n  //                         downloadProgressCallback: callbackArgs => {\n  //                             const {\n  //                                 contentLength,\n  //                                 progress\n  //                             } = callbackArgs;\n  //                             video.dwnProgress.progress = progress;\n  //                             this.$forceUpdate();\n  //                         }\n  //                     })\n  //                     .then(response => {\n  //                         video.dwnProgress.progress = 0;\n  //                         video.dwnProgress.downloading = false;\n  //                         this.getVideoDiskInfo(title);\n  //                         if (!noFeedback) {\n  //                             this.$refs.modal.openModal({\n  //                                 title: \"Success!\",\n  //                                 text: `Video (${title}) download complete`\n  //                             });\n  //                         }\n  //                         resolve();\n  //                     })\n  //                     .catch(error => {\n  //                         console.error(error);\n  //                         reject(error);\n  //                     });\n  //             }\n  //         });\n  //     },\n  //     downloadMusic: function(title, noFeedback) {\n  //         return new Promise((resolve, reject) => {\n  //             const video = this.getVideoByTitle(title);\n  //             if (\n  //                 video &&\n  //                 video.video_url &&\n  //                 this.path &&\n  //                 !video.diskInfo.mp3\n  //             ) {\n  //                 video.dwnProgress.downloading = true;\n  //                 video.dwnProgress.progress = 0;\n  //                 google\n  //                     .downloadMusic({\n  //                         savePath: this.path,\n  //                         videoTitle: video.title,\n  //                         videoUrl: video.video_url,\n  //                         downloadProgressCallback: callbackArgs => {\n  //                             const {\n  //                                 contentLength,\n  //                                 progress\n  //                             } = callbackArgs;\n  //                             video.dwnProgress.progress = progress;\n  //                             this.$forceUpdate();\n  //                         }\n  //                     })\n  //                     .then(() => {\n  //                         video.dwnProgress.progress = 0;\n  //                         video.dwnProgress.downloading = false;\n  //                         this.getVideoDiskInfo(title);\n  //                         if (!noFeedback) {\n  //                             this.$refs.modal.openModal({\n  //                                 title: \"Success!\",\n  //                                 text: `MP3 (${title}) download complete`\n  //                             });\n  //                         }\n  //                         resolve();\n  //                     })\n  //                     .catch(error => {\n  //                         console.error(error);\n  //                         reject(error);\n  //                     });\n  //             }\n  //         });\n  //     },\n  //     savePath: function() {\n  //         const paths = window.electron.dialog.showOpenDialog({\n  //             properties: [\"openDirectory\"]\n  //         });\n  //         if (paths && paths.length === 1) {\n  //             this.path = paths[0];\n  //             config.getUserConfig().then(userConfig => {\n  //                 userConfig.setPath = this.path;\n  //                 config.saveCurrentUserConfig();\n  //             });\n  //         }\n  //     },\n  //     getVideoDiskInfo: function(title) {\n  //         const video = this.getVideoByTitle(title);\n  //         if (!video) {\n  //             console.error(`No video found for title: ${title}`);\n  //             return;\n  //         }\n  //         google\n  //             .getItemDiskInformation({\n  //                 title: title,\n  //                 filePath: this.path,\n  //                 fileTypes: [\".mp3\", \".mp4\"]\n  //             })\n  //             .then(info => {\n  //                 video.diskInfo.mp3 = !!info[\".mp3\"];\n  //                 video.diskInfo.mp4 = !!info[\".mp4\"];\n  //                 this.$forceUpdate();\n  //             })\n  //             .catch(console.error);\n  //     }\n  // }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Youtube2Comp.vue?vue&type=script&lang=js&\n");

/***/ })

})